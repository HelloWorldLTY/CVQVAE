import numpy as np
import pandas as pd
import scanpy as sc
import scib

#adata_result: our output

#adata_raw: benchmark method

#All the datasets I mentioned above can be generated by task3 prediciton code.
#nmi rate
def get_nmi(adata):
    print('Preprocessing')
    sc.pp.neighbors(adata, use_rep='X_emb')
    print('Clustering')
    scib.cl.opt_louvain(
        adata,
        label_key='cell_type',
        cluster_key='cluster',
        plot=False,
        inplace=True,
        force=True
    )
    print('Compute score')
    score = scib.me.nmi(adata, group1='cluster', group2='cell_type')
    return score

#cell type asw
def get_cell_type_ASW(adata):
    return scib.me.silhouette(adata, group_key='cell_type', embed='X_emb')

#cell cycle
def get_cell_cycle_conservation(adata_solution):
    recompute_cc = 'S_score' not in adata_solution.obs_keys() or \
            'G2M_score' not in adata_solution.obs_keys()
    organism = adata_solution.uns['organism']
    print('Compute score')
    adata = sc.AnnData(adata_solution.obsm['embeddings']) 
    adata.obs_names = adata_solution.obs_names
    adata.obs['batch'] = list(adata_solution.obs['batch'])
    adata.obsm['X_emb'] = adata_solution.obsm['X_emb']
    adata.uns['organism'] = adata_solution.uns['organism']
    score = scib.me.cell_cycle(
        adata_pre=adata_solution,
        adata_post=adata,
        batch_key='batch',
        embed='X_emb',
        recompute_cc=recompute_cc,
        organism=organism
    )
    return score

#traj_conservation
def get_traj_conservation(adata_solution):
    adt_atac_trajectory = 'pseudotime_order_ATAC' if 'pseudotime_order_ATAC' in adata_solution.obs else 'pseudotime_order_ADT'
    sc.pp.neighbors(adata_solution, use_rep='X_emb')
    obs_keys = adata_solution.obs_keys()
    adata = sc.AnnData(adata_solution.obsm['embeddings']) 
    adata.obs_names = adata_solution.obs_names
    adata.obsm['X_emb'] = adata_solution.obsm['X_emb']
    adata.uns['organism'] = adata_solution.uns['organism']
    adata.obs['cell_type'] = list(adata_solution.obs['cell_type'])
    sc.pp.neighbors(adata, use_rep='X_emb')
    if 'pseudotime_order_GEX' in obs_keys:
        score_rna = scib.me.trajectory_conservation(
            adata_pre=adata_solution,
            adata_post=adata,
            label_key='cell_type',
            pseudotime_key='pseudotime_order_GEX'
        )
    else:
        score_rna = np.nan

    if adt_atac_trajectory in obs_keys:
        score_adt_atac = scib.me.trajectory_conservation(
            adata_pre=adata_solution,
            adata_post=adata,
            label_key='cell_type',
            pseudotime_key=adt_atac_trajectory
        )
    else:
        score_adt_atac = np.nan

    score_mean = (score_rna + score_adt_atac) / 2
    return score_mean

#batch asw
def get_batch_ASW(adata):
    score = scib.me.silhouette_batch(
        adata,
        batch_key='batch',
        group_key='cell_type',
        embed='X_emb',
        verbose=False
    )
    return score

#graph connectivity
def get_graph_connectivity(adata):
    sc.pp.neighbors(adata, use_rep='X_emb')
    print('Compute score')
    score = scib.me.graph_connectivity(adata, label_key='cell_type')
    return score

# adata should be generated by the original gene expression matrix.
# adata.obsm['embeddings'] contains the embeddings. 
def evaluation_task3(adata):
    adata.obsm['X_emb'] = adata.obsm['embeddings']

    nmi = get_nmi(adata)
    cell_type_asw = get_cell_type_ASW(adata)
    cc_con = get_cell_cycle_conservation(adata)
    traj_con = get_traj_conservation(adata)
    batch_asw = get_batch_ASW(adata)
    graph_score = get_graph_connectivity(adata)

    print('cell type rate')
    print('nmi:',nmi, '    celltype asw:',cell_type_asw, '       cell cycle:',cc_con, '          traj:',traj_con)
    print('batch rate')
    print('batch asw:',batch_asw,'   graph connectivity score:',graph_score)
    print('average metric: %.5f'%np.mean([nmi, cell_type_asw, cc_con, traj_con, batch_asw, graph_score]))
    
    
ema_data = np.load('multiome_results_ema.npy')

adata_gex = sc.read_h5ad("/gpfs/ysm/home/tl688/scrnahpc/multiome_gex_processed_training.h5ad")
adata_atac = sc.read_h5ad("/gpfs/ysm/home/tl688/scrnahpc/multiome_atac_processed_training.h5ad")

adata = adata_gex.concatenate(adata_gex, batch_key='batch_key', batch_categories=['atac','gex'])

#batch_list = ['atac' for i in range(len(adata_gex))] + ['rna' for i in range(len(adata_gex))]

batch_list = list(adata_gex.obs['batch'])*2

adata.obs['batch'] = batch_list

adata.obsm['embeddings'] = ema_data

adata.uns['organism'] = 'human'

evaluation_task3(adata)
